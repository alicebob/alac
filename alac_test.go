package alac

import (
	"bytes"
	"encoding/hex"
	"testing"
)

func Test(t *testing.T) {
	a, err := New()
	if err != nil {
		t.Fatal(err)
	}

	for enc, dec := range map[string]string{
		// 2 channel cases
		"200000040013080981f8c1ff80000013080981f8c1ff800000ff808fffc37e3ff1306ee87b8af0ba314080780de8952c97931e90d85b5d4cebaa4a93b7a88ab0d206e0fae0ee2042894e6c3e3ce0e0f3c27b985c535c3e15826f51e095bc125faadbde9a2fd70061295676778e2924bfe023fff11a2ffc600fd327b93f8ee0ff0b22581a55daf927243553b91696954a78cb1c6a79a6933f03c072763286f08e47870076fa449e039cea55a41ed607c834c8846cfa28bd4be16f4c5066b3446906facbc3e9aefc":                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90da311280edf11140ea111d20d1611d20dfc10420e9411040f8712c60f5913751001147e111815fd12de169614b4180b16221a3817391b32181f1c3919f51c291ab21dbc1a171ec51aec1d3d1a3d1da7197a1c4c19fb1b9718661b6c17701a9316a01961166b199416a919e8160f1a3d17861abb17261b6518df1ba818351c2d18fa1b5e17691b8a168d1aba15a719f91403192714491841135c1778128b169811b315be10fd148510ee14a21017158e101d15ae106b15fc10b215ef106f15b310fd149610b414c010a4145911f01407126a158d12ec153c13a316fe1366175f14c91727147c177c13af16cf12fb1526126f153d1189148110921363102713",
		"2000000408130809b5f91bffe20058130809cbf9380006006bff109c0f63c94a58910205b809e01e910ff64d4a7f3fae8d08968a32db2744458c88a8109151c209ed086c93dbed04320c10c1a1f0acb364e39b7ca47250d93d0b4f83f05be9959f68cba66a61ba84c5661b8d241c9b2212cf6cf9fd2bc6b78ccf6b78f2270f2f047bf12254055146a60aeb0832a7ccd0931b699aa2179bc2162476091536872f0ddfdb74087c124c05493bd5cd70cc21f1ad7656598fc51a1217a1a107622502d23da3a32c3cce73a957c3576477e6f9dda501db7c4e0f85c86ff4fa5314642112cf239b6eb0688bc084216692ed26376a5017b6aa9829dfecae1ee8b8325f8671c293288330b2c8636ae209e708336bef50594a61b9b139b619e4b9f9e66b096c6a9b2309472d4cc0a18911d1f8e1f102cf94bbbe67f936e4e8cb23dd620ce09a6ad8dcd4c2829bbdc1e760e135782f31138f96f45f927fc66df57cd6b131a4c0d0901521d7e4c9b878689d340cd4127d10ee234f9f6be1b042a0cd4f899ce8d89f12a0f030cc76d811310a8a18a6cf062ca6ce6418f605ff0299911361a3e5c17934ba805935f9ab9cee2711634d4d2362b64216017371ab2a18d8a826404bc0ff2acfb5e13bede70b9fddb568a0d1a86a071877cd8978949b2ac5f24d5983e3324b09a570ae0003e824aca7be1ee3dce88f92d904a2a339954a8b2265d5a3fc180ed8411522377b1713348c71d45067e493d1a0ce83cf1c924b336f15897912969a23159cc3e1f256b61550b4a563814e9e904b2691e9f700a30472cef19d61aa3969fea612f0c0489adc0bebb999eba175a9ac8cc39c8c773f0b2c158039d358f235a2651694e1b6969091c145646af29411d6efad24902a169c6a84066ef942fb93bcca3cad7eb95d03aab5711432f44a66d9182c3e4e56d15e38342320e26bf22129d6cc4056cef425920a9215531228a985365edd5a317d1a4cc5be060e77685707075f2545889fcdc16c126444cdb01a5ca2616410227c7c2478436434fc6605dbc2e6fe5cd766cb5a1645a13a2190e9d7b05dc0": "9c103613d9106b131511a3136711be13bf11c613be11cb136811a11316112213a5105d12c20f5311c10e34106e0e910fea0e9c0f5f0fd70f690ffa0f7f0f1a10990f14103e0fcc0f770e5b0fab0ddb0e410d980ef70c870e2f0c270e4e0baa0d030ba00dfd0ae50deb0a300eef0a870e070bdd0e0b0b300fa40a270f8409350e1108bf0ce006990b2306ed0aea05bd0a1706f90a5c06490b86069a0ba606e90bef06170c3407590c4307d50cca079c0d2b09c70e5e0ae20fdc0a9210880b43117f0ce4110b0d1f123c0d3912480d0612c40cf7107e0b460fc809430dfe07e10a280645080704aa05d3012003fbff9d0060fe23fecbfcfdfb2bfb13fa90f9eff770f8f8f5e7f7dcf470f726f412f73df31cf76bf22ff7e6f1e3f62bf155f6edefb0f57feedaf40eedd5f383ebd5f2dde989f1eee7c4efdee571ee5de4bfed2ae396ec79e1d3ea83df6ae9d4ddd7e8abdcace807dc04e839db24e713da30e793d99ee7bdd93fe787d985e6e6d81ce65dd8b6e5d6d705e53dd72de4aad689e302d620e363d5bae223d58be232d5d3e261d527e38fd509e37bd5ace246d5a1e260d5dce2aad5f0e2e9d5e5e235d6dce272d6e6e2b6d63be345d78be3bfd79be302d800e4bcd8d0e4e5d981e5d2dae3e553dbcae575db6ce566db8fe59adb0fe614dc35e669dc05e685dce0e59ddcffe5eadc3be676dd2ee6ffdd26e691debde693dfb9e705e188e869e2e9e85ee3e8e8c7e3e7e8f9e308e96ae4e6e8e2e497e811e5b3e86de53ce95be6d7e994e772eab5e8edea85e91eeb10ea2aeb9cea36eb2eeb45eba7eb4deb0dec55eb91ec8deb5cedfaeb46ee5bec0def97ecc5efbcec7af0dbec19f103edaff1e5ec0cf238ecdaf151eb4af18fead0f0ffe9abf0cce9e0f028ea77f1e5ea75f280eb8af3c7eb31f40dec6ef44dec9ef44fece5f476ec50f5e1ecd4f511ed18f6eeecfef5f8ec2df6abed45f716eff9f8c7f0b9fa76f296fc34f4affedbf59d0004f7d40193f750020cf8ce020cf9e70382fa4b0501fc9e065efdde079dfe0d09fcff3f0a8701750bc702760cac033d0d9e04f80d9705b30e5f064b0fe606a30f48070410c2079e10720840116c0918128d0a3c13540b0c14a30b4414e10b49141c0c3f14030c0114640b5f138a0a6b121c0ab7110d0a7011bf0924114509a1100d091d10f708cf0fbb089d0f61083b0f3808e70e5608020f7108420f8a085f0fd0087b0f0e09860f41098d0fb809d00f610a2a10f00a50106c0b5d100e0c8d10e30cd510940dfb10d10ddd10d20d8610eb0d0710ea0d720f930dda0e230d300ee60c750deb0c0b0d350d2c0d980d680d0a0e880dda0e090e05100d0f4a112110b21231112414611265158613aa168d140d189015611995169e1a9517b21b7b18711c1c19e21c6f19e01c7819401c1e193e1b4b18171a4117e3186616d317cb15f4165b153f163515f7158d15141659161b163717fd15d917d61553187315b318ed14e6186514ee188713aa185212f71707110917800f0316e30def14a80c0d14d80b9013410b7313ca0a8e13620a9813130a8813af096e130f0924139508d7127408d9126a080213a3085e13560916140a0ab514440ae014150ab114d409311499096d13d00839120a073e100205dc0d4e03850b6601fd0839ff7806a2fd9b04d8fc5b0362fc7a02fafbd7017afb0801d9fae5ff09fab8fef6f87afd02f829fc91f72cfb42f787fac3f6cef93cf6daf8b0f5caf72df5d8f6e7f43bf6a7f4aaf530f4daf4c5f319f46df37bf3d7f2a0f229f2b5f1cbf12df1e5f11ff19bf2aaf1cef3c3f2d0f4d1f33ff558f42ef53cf4a0f49af302f401f3c9f3e2f26cf39df282f2bdf1eaf136f134f291f1a7f2ebf1a5f2def172f2d4f19af2dbf153f331f258f422f33cf51ff40cf6d1f401f794f50af881f63df9b7f7dbfa5ef99ffc01fb09fe3efc22ff40fd23001dfee800a2feec006cfefcff53fd",
	} {
		encB, err := hex.DecodeString(enc)
		if err != nil {
			t.Fatal(err)
		}
		decB, err := hex.DecodeString(dec)
		if err != nil {
			t.Fatal(err)
		}
		if have, want := a.Decode(encB), decB; !bytes.Equal(have, want) {
			t.Errorf("have\n  %s\nwant\n  %s\n", have, want)
		}
	}
}
